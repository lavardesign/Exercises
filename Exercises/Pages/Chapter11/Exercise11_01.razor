@page "/exercise11-01"
@using Exercises.Classes.Chapter11

<h3>Substances</h3>

<div class="row">
    <div class="col-5">
        @if (error != string.Empty)
        {
            <div class="form-row bottom-margin-small">
                <div class="col-7 alert alert-danger" role="alert">
                    <strong>Error</strong> @error
                </div>
            </div>
        }

        <div class="form-row bottom-margin-small">
            <div class="col-3">
                <input class="form-control" @bind="@newName" placeholder="Substance Name" />
            </div>
            <div class="col-1">
                <input class="form-control" @bind="@newMass" placeholder="Mass" />
            </div>
            <div class="col-2">
                <div class="form-group">
                    <select class="form-control" @bind="@state">
                        @foreach (var state in substances.StateNames)
                        {
                            <option value=@state>@state</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-auto">
                <button class=" btn btn-primary btn-padding" @onclick="Add">Add</button>
            </div>
        </div>
        <div class="form-row bottom-margin-small">
            <div class="col-auto">
                <div class="btn-group" role="group">
                    <button class="btn btn-primary btn-padding" @onclick="@(e => Get(States.Solid))">Solid</button>
                    <button class="btn btn-primary btn-padding" @onclick="@(e => Get(States.Liquid))">Liquid</button>
                    <button class="btn btn-primary btn-padding" @onclick="@(e => Get(States.Gas))">Gas</button>
                    <button class="btn btn-primary btn-padding" @onclick="@(e => Get(States.Plasma))">Plasma</button>
                    <button class="btn btn-primary btn-padding" @onclick="GetAll">All</button>
                </div>
            </div>
        </div>
        <div class="form-row">
            <ul class="list-group col-7">
                @foreach (var matter in matters)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <strong>@matter.Name (@matter.Mass)</strong>
                        <span class="badge badge-primary badge-pill">@matter.State</span>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    Substances substances = new Substances();
    List<IMatter> matters = new List<IMatter>();
    string newName = string.Empty;
    string newMass = string.Empty;
    string error = string.Empty;
    string state = string.Empty;

    protected override void OnInitialized()
    {
        GetAll();
    }

    void Add()
    {
        try
        {
            error = string.Empty;
            var success = int.TryParse(newMass, out int mass);
            if (success)
            {
                var stateValue = substances.GetStateValue(state);
                switch (stateValue)
                {
                    case States.Liquid:
                        substances.Add(new Liquid(newName, mass));
                        break;
                    case States.Gas:
                        substances.Add(new Gas(newName, mass));
                        break;
                    case States.Plasma:
                        substances.Add(new Plasma(newName, mass));
                        break;
                    case States.Solid:
                        substances.Add(new Solid(newName, mass));
                        break;
                }

                newName = string.Empty;
                newMass = string.Empty;
                state = string.Empty;
            }
            else error = $"Could not add the substance.";
        }
        catch
        {
            error = $"Could not add the substance.";
        }
    }

    void GetAll()
    {
        error = string.Empty;
        matters = substances.Get();
    }

    void Get(States state)
    {
        error = string.Empty;
        matters = substances.Get(s => s.State.Equals(state));
    }
}
