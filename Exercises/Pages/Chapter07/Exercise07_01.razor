@page "/exercise07-01"
@using Exercises.Classes.Chapter07

<input @bind="@input" style="width:145px;" readonly />
<br />
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(1))">1</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(2))">2</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(3))">3</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AddOperation(Operators.Multiply))">*</button>
<br />
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(4))">4</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(5))">5</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(6))">6</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AddOperation(Operators.Divide))">/</button>
<br />
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(7))">7</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(8))">8</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AppendDigit(9))">9</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AddOperation(Operators.Subtract))">-</button>
<br />
<button class="btn-sm btn-light calc-btn-size-lg" @onclick="@(e => AppendDigit(0))">0</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="@(e => AddOperation(Operators.Add))">+</button>
<br />
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="ClearDigits">C</button>
<button class="btn-sm btn-light calc-btn-size-sm" style="padding-left:4px;" @onclick="ClearCalculation">CC</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="AddDecimal">,</button>
<button class="btn-sm btn-light calc-btn-size-sm" @onclick="Calculate">=</button>

<p>@output</p>

@code {
    string input = string.Empty;
    string output = string.Empty;
    Calculator calc = new Calculator();

    void AppendDigit(int digit)
    {
        if (input.Length.Equals(0) && digit.Equals(0)) return;
        if (calc.Operations.Count.Equals(0)) output = string.Empty;
        input += digit;
    }

    void AddDecimal()
    {
        if (!input.Contains(','))
            input += ',';
    }

    void DisplayOutput()
    {
        output = string.Empty;
        foreach (var op in calc.Operations)
        {
            output += $"{op.Value} {op.OperatorValue} ";
        }
        if (calc.Operations.Count() > 1)
        {
            var result = calc.Calculate();
            input = result.ToString();
            output = output.Substring(0, output.Length - 2);
            output += $"= {result}";
        }
    }

    void AddOperation(Operators @operator)
    {
        if (input.Length.Equals(0) && @operator == Operators.Subtract)
        {
            input = "-";
            return;
        }
        var success = double.TryParse(input, out double value);
        if (success)
        {
            calc.AddOperation(new Operation(value, @operator));
            DisplayOutput();
            ClearDigits();
        }
    }

    void Calculate()
    {
        var success = double.TryParse(input, out double value);
        if (success)
        {
            AddOperation(Operators.Equals);
            calc = new Calculator();
        }
    }

    void ClearCalculation()
    {
        calc = new Calculator();
        output = string.Empty;
        ClearDigits();
    }

    void ClearDigits()
    {
        input = string.Empty;
    }
}
